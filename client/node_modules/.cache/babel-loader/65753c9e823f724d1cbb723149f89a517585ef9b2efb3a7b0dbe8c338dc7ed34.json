{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  cartItems: []\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const courseToAdd = action.payload;\n\n      // Check if the course is already in the cart\n      const existingCourse = state.cartItems.find(item => item.id === courseToAdd.id);\n      if (existingCourse) {\n        // If the course is already in the cart, you might want to update quantity or handle it based on your logic\n        // For simplicity, this example assumes you only add unique courses to the cart\n        console.log('Course is already in the cart!');\n      } else {\n        // If the course is not in the cart, add it\n        state.cartItems.push(courseToAdd);\n      }\n    },\n    removeFromCart: (state, action) => {\n      const courseIdToRemove = action.payload;\n      state.cartItems = state.cartItems.filter(item => item.id !== courseIdToRemove);\n    },\n    clearCart: state => {\n      state.cartItems = [];\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","cartItems","cartSlice","name","reducers","addToCart","state","action","courseToAdd","payload","existingCourse","find","item","id","console","log","push","removeFromCart","courseIdToRemove","filter","clearCart","actions","reducer"],"sources":["C:/Users/Orange/Desktop/CourseWave/client/src/Redux/CartSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  cartItems: [],\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    addToCart: (state, action) => {\r\n      const courseToAdd = action.payload;\r\n\r\n      // Check if the course is already in the cart\r\n      const existingCourse = state.cartItems.find(item => item.id === courseToAdd.id);\r\n\r\n      if (existingCourse) {\r\n        // If the course is already in the cart, you might want to update quantity or handle it based on your logic\r\n        // For simplicity, this example assumes you only add unique courses to the cart\r\n        console.log('Course is already in the cart!');\r\n      } else {\r\n        // If the course is not in the cart, add it\r\n        state.cartItems.push(courseToAdd);\r\n      }\r\n    },\r\n    removeFromCart: (state, action) => {\r\n      const courseIdToRemove = action.payload;\r\n      state.cartItems = state.cartItems.filter(item => item.id !== courseIdToRemove);\r\n    },\r\n    clearCart: (state) => {\r\n      state.cartItems = [];\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addToCart, removeFromCart, clearCart } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5B,MAAMC,WAAW,GAAGD,MAAM,CAACE,OAAO;;MAElC;MACA,MAAMC,cAAc,GAAGJ,KAAK,CAACL,SAAS,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,WAAW,CAACK,EAAE,CAAC;MAE/E,IAAIH,cAAc,EAAE;QAClB;QACA;QACAI,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC/C,CAAC,MAAM;QACL;QACAT,KAAK,CAACL,SAAS,CAACe,IAAI,CAACR,WAAW,CAAC;MACnC;IACF,CAAC;IACDS,cAAc,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAMW,gBAAgB,GAAGX,MAAM,CAACE,OAAO;MACvCH,KAAK,CAACL,SAAS,GAAGK,KAAK,CAACL,SAAS,CAACkB,MAAM,CAACP,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKK,gBAAgB,CAAC;IAChF,CAAC;IACDE,SAAS,EAAGd,KAAK,IAAK;MACpBA,KAAK,CAACL,SAAS,GAAG,EAAE;IACtB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,SAAS;EAAEY,cAAc;EAAEG;AAAU,CAAC,GAAGlB,SAAS,CAACmB,OAAO;AAEzE,eAAenB,SAAS,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}